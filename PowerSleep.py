# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'PS3V9.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(593, 556)
        MainWindow.setMinimumSize(QtCore.QSize(593, 556))
        MainWindow.setMaximumSize(QtCore.QSize(593, 556))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.apibox = QtWidgets.QGroupBox(self.centralwidget)
        self.apibox.setGeometry(QtCore.QRect(20, 30, 261, 181))
        self.apibox.setObjectName("apibox")
        self.api = QtWidgets.QLabel(self.apibox)
        self.api.setGeometry(QtCore.QRect(10, 30, 21, 16))
        self.api.setObjectName("api")
        self.screct = QtWidgets.QLabel(self.apibox)
        self.screct.setGeometry(QtCore.QRect(10, 90, 21, 16))
        self.screct.setObjectName("screct")
        self.api_key = QtWidgets.QLineEdit(self.apibox)
        self.api_key.setGeometry(QtCore.QRect(60, 20, 171, 41))
        self.api_key.setObjectName("api_key")
        self.screct_key = QtWidgets.QLineEdit(self.apibox)
        self.screct_key.setGeometry(QtCore.QRect(60, 80, 171, 41))
        self.screct_key.setObjectName("screct_key")
        self.input_api = QtWidgets.QPushButton(self.apibox)
        self.input_api.setGeometry(QtCore.QRect(60, 140, 75, 23))
        self.input_api.setObjectName("input_api")
        self.clear = QtWidgets.QPushButton(self.apibox)
        self.clear.setGeometry(QtCore.QRect(160, 140, 75, 23))
        self.clear.setObjectName("clear")
        self.api_text = QtWidgets.QLabel(self.apibox)
        self.api_text.setGeometry(QtCore.QRect(64, 26, 161, 31))
        self.api_text.setObjectName("api_text")
        self.screct_api = QtWidgets.QLabel(self.apibox)
        self.screct_api.setGeometry(QtCore.QRect(70, 80, 151, 41))
        self.screct_api.setObjectName("screct_api")
        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(290, 30, 261, 181))
        self.groupBox_2.setObjectName("groupBox_2")
        self.label = QtWidgets.QLabel(self.groupBox_2)
        self.label.setGeometry(QtCore.QRect(10, 20, 101, 16))
        self.label.setObjectName("label")
        self.bidLabel = QtWidgets.QLabel(self.groupBox_2)
        self.bidLabel.setGeometry(QtCore.QRect(10, 60, 71, 16))
        self.bidLabel.setObjectName("bidLabel")
        self.askLabel = QtWidgets.QLabel(self.groupBox_2)
        self.askLabel.setGeometry(QtCore.QRect(10, 100, 61, 16))
        self.askLabel.setObjectName("askLabel")
        self.load_price = QtWidgets.QPushButton(self.groupBox_2)
        self.load_price.setGeometry(QtCore.QRect(80, 140, 75, 23))
        self.load_price.setObjectName("load_price")
        self.clear_price = QtWidgets.QPushButton(self.groupBox_2)
        self.clear_price.setGeometry(QtCore.QRect(160, 140, 75, 23))
        self.clear_price.setObjectName("clear_price")
        self.bid_price = QtWidgets.QTextBrowser(self.groupBox_2)
        self.bid_price.setGeometry(QtCore.QRect(80, 40, 151, 41))
        self.bid_price.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.bid_price.setAutoFillBackground(False)
        self.bid_price.setDocumentTitle("")
        self.bid_price.setOverwriteMode(False)
        self.bid_price.setAcceptRichText(True)
        self.bid_price.setCursorWidth(1)
        self.bid_price.setObjectName("bid_price")
        self.ask_price = QtWidgets.QTextBrowser(self.groupBox_2)
        self.ask_price.setGeometry(QtCore.QRect(80, 90, 151, 41))
        self.ask_price.setObjectName("ask_price")
        self.Transaction = QtWidgets.QGroupBox(self.centralwidget)
        self.Transaction.setGeometry(QtCore.QRect(20, 240, 531, 251))
        self.Transaction.setObjectName("Transaction")
        self.bb_label = QtWidgets.QLabel(self.Transaction)
        self.bb_label.setGeometry(QtCore.QRect(10, 30, 41, 16))
        self.bb_label.setObjectName("bb_label")
        self.open_label = QtWidgets.QLabel(self.Transaction)
        self.open_label.setGeometry(QtCore.QRect(60, 30, 71, 16))
        self.open_label.setObjectName("open_label")
        self.label_1 = QtWidgets.QLabel(self.Transaction)
        self.label_1.setGeometry(QtCore.QRect(10, 60, 16, 16))
        self.label_1.setTextFormat(QtCore.Qt.AutoText)
        self.label_1.setObjectName("label_1")
        self.label_2 = QtWidgets.QLabel(self.Transaction)
        self.label_2.setGeometry(QtCore.QRect(10, 100, 16, 16))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.Transaction)
        self.label_3.setGeometry(QtCore.QRect(10, 140, 16, 16))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.Transaction)
        self.label_4.setGeometry(QtCore.QRect(10, 180, 16, 16))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.Transaction)
        self.label_5.setGeometry(QtCore.QRect(10, 220, 16, 16))
        self.label_5.setObjectName("label_5")
        self.open_label_2 = QtWidgets.QLabel(self.Transaction)
        self.open_label_2.setGeometry(QtCore.QRect(170, 30, 71, 16))
        self.open_label_2.setObjectName("open_label_2")
        self.open_label_3 = QtWidgets.QLabel(self.Transaction)
        self.open_label_3.setGeometry(QtCore.QRect(290, 30, 55, 16))
        self.open_label_3.setObjectName("open_label_3")
        self.open_label_4 = QtWidgets.QLabel(self.Transaction)
        self.open_label_4.setGeometry(QtCore.QRect(400, 30, 55, 16))
        self.open_label_4.setObjectName("open_label_4")
        self.close_price1_4 = QtWidgets.QLabel(self.Transaction)
        self.close_price1_4.setGeometry(QtCore.QRect(160, 160, 81, 21))
        self.close_price1_4.setText("")
        self.close_price1_4.setTextFormat(QtCore.Qt.RichText)
        self.close_price1_4.setObjectName("close_price1_4")
        self.open_button1 = QtWidgets.QPushButton(self.Transaction)
        self.open_button1.setGeometry(QtCore.QRect(260, 50, 93, 31))
        self.open_button1.setObjectName("open_button1")
        self.open_button1_2 = QtWidgets.QPushButton(self.Transaction)
        self.open_button1_2.setGeometry(QtCore.QRect(260, 90, 93, 31))
        self.open_button1_2.setObjectName("open_button1_2")
        self.open_button1_3 = QtWidgets.QPushButton(self.Transaction)
        self.open_button1_3.setGeometry(QtCore.QRect(260, 130, 93, 31))
        self.open_button1_3.setObjectName("open_button1_3")
        self.open_button1_4 = QtWidgets.QPushButton(self.Transaction)
        self.open_button1_4.setGeometry(QtCore.QRect(260, 170, 93, 31))
        self.open_button1_4.setObjectName("open_button1_4")
        self.open_button1_5 = QtWidgets.QPushButton(self.Transaction)
        self.open_button1_5.setGeometry(QtCore.QRect(260, 210, 93, 28))
        self.open_button1_5.setObjectName("open_button1_5")
        self.close_button1 = QtWidgets.QPushButton(self.Transaction)
        self.close_button1.setGeometry(QtCore.QRect(370, 50, 93, 31))
        self.close_button1.setObjectName("close_button1")
        self.close_button1_2 = QtWidgets.QPushButton(self.Transaction)
        self.close_button1_2.setGeometry(QtCore.QRect(370, 90, 93, 28))
        self.close_button1_2.setObjectName("close_button1_2")
        self.close_button1_3 = QtWidgets.QPushButton(self.Transaction)
        self.close_button1_3.setGeometry(QtCore.QRect(370, 130, 93, 28))
        self.close_button1_3.setObjectName("close_button1_3")
        self.close_button1_4 = QtWidgets.QPushButton(self.Transaction)
        self.close_button1_4.setGeometry(QtCore.QRect(370, 170, 93, 28))
        self.close_button1_4.setObjectName("close_button1_4")
        self.close_button1_5 = QtWidgets.QPushButton(self.Transaction)
        self.close_button1_5.setGeometry(QtCore.QRect(370, 210, 93, 28))
        self.close_button1_5.setObjectName("close_button1_5")
        self.price_1 = QtWidgets.QLabel(self.Transaction)
        self.price_1.setGeometry(QtCore.QRect(50, 50, 81, 31))
        self.price_1.setText("")
        self.price_1.setObjectName("price_1")
        self.price_2 = QtWidgets.QLabel(self.Transaction)
        self.price_2.setGeometry(QtCore.QRect(50, 90, 81, 31))
        self.price_2.setObjectName("price_2")
        self.price_3 = QtWidgets.QLabel(self.Transaction)
        self.price_3.setGeometry(QtCore.QRect(50, 130, 81, 31))
        self.price_3.setObjectName("price_3")
        self.price_4 = QtWidgets.QLabel(self.Transaction)
        self.price_4.setGeometry(QtCore.QRect(50, 170, 81, 31))
        self.price_4.setObjectName("price_4")
        self.price_5 = QtWidgets.QLabel(self.Transaction)
        self.price_5.setGeometry(QtCore.QRect(50, 210, 81, 31))
        self.price_5.setObjectName("price_5")
        self.price_6 = QtWidgets.QLabel(self.Transaction)
        self.price_6.setGeometry(QtCore.QRect(160, 50, 81, 31))
        self.price_6.setObjectName("price_6")
        self.price_7 = QtWidgets.QLabel(self.Transaction)
        self.price_7.setGeometry(QtCore.QRect(160, 90, 81, 31))
        self.price_7.setObjectName("price_7")
        self.price_8 = QtWidgets.QLabel(self.Transaction)
        self.price_8.setGeometry(QtCore.QRect(160, 130, 81, 31))
        self.price_8.setObjectName("price_8")
        self.price_9 = QtWidgets.QLabel(self.Transaction)
        self.price_9.setGeometry(QtCore.QRect(160, 170, 81, 31))
        self.price_9.setObjectName("price_9")
        self.price_10 = QtWidgets.QLabel(self.Transaction)
        self.price_10.setGeometry(QtCore.QRect(160, 210, 81, 31))
        self.price_10.setObjectName("price_10")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 593, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.input_api.clicked.connect(self.api_key.hide)
        self.input_api.clicked.connect(self.screct_key.hide)

        self.api_text.hide()
        self.screct_api.hide()
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Training Moniter"))
        self.apibox.setTitle(_translate("MainWindow", "Login API"))
        self.api.setText(_translate("MainWindow", "API:"))
        self.screct.setText(_translate("MainWindow", "KEY:"))
        self.input_api.setText(_translate("MainWindow", "Enter"))
        self.clear.setText(_translate("MainWindow", "Clear"))
        self.groupBox_2.setTitle(_translate("MainWindow", "Market Price"))
        self.label.setText(_translate("MainWindow", "BTC-PERPETUAL"))
        self.bidLabel.setText(_translate("MainWindow", "Bid Price :"))
        self.askLabel.setText(_translate("MainWindow", "Ask Price :"))
        self.load_price.setText(_translate("MainWindow", "Load"))
        self.clear_price.setText(_translate("MainWindow", "Clear"))
        self.bid_price.setHtml(_translate("MainWindow",
                                          "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                          "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
                                          "p, li { white-space: pre-wrap; }\n"
                                          "</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:7.8pt; font-weight:400; font-style:normal;\">\n"
                                          "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.Transaction.setTitle(_translate("MainWindow", "Transaction"))
        self.bb_label.setText(_translate("MainWindow", "Bullet"))
        self.open_label.setText(_translate("MainWindow", "Open Price"))
        self.label_1.setText(_translate("MainWindow", "1"))
        self.label_2.setText(_translate("MainWindow", "2"))
        self.label_3.setText(_translate("MainWindow", "3"))
        self.label_4.setText(_translate("MainWindow", "4"))
        self.label_5.setText(_translate("MainWindow", "5"))
        self.open_label_2.setText(_translate("MainWindow", "Close Price"))
        self.open_label_3.setText(_translate("MainWindow", "Open"))
        self.open_label_4.setText(_translate("MainWindow", "Close"))
        self.open_button1.setText(_translate("MainWindow", "Open"))
        self.open_button1_2.setText(_translate("MainWindow", "Open"))
        self.open_button1_3.setText(_translate("MainWindow", "Open"))
        self.open_button1_4.setText(_translate("MainWindow", "Open"))
        self.open_button1_5.setText(_translate("MainWindow", "Open"))
        self.close_button1.setText(_translate("MainWindow", "Close"))
        self.close_button1_2.setText(_translate("MainWindow", "Close"))
        self.close_button1_3.setText(_translate("MainWindow", "Close"))
        self.close_button1_4.setText(_translate("MainWindow", "Close"))
        self.close_button1_5.setText(_translate("MainWindow", "Close"))

        self.input_api.clicked.connect(self.onClick)
        self.clear.clicked.connect(self.onClickhide)
        self.open_button1.hide()
        self.open_button1_2.hide()
        self.open_button1_3.hide()
        self.open_button1_4.hide()
        self.open_button1_5.hide()

        self.close_button1.hide()
        self.close_button1_2.hide()
        self.close_button1_3.hide()
        self.close_button1_4.hide()
        self.close_button1_5.hide()

    def onClick(self):

        import credentials as cr
        api_result = self.api_key.text()
        cr.client_id = api_result
        self.api_text.setText(api_result)
        self.api_text.show()

        screct_result = self.screct_key.text()
        cr.client_secret = screct_result
        self.screct_api.setText('******************')
        self.screct_api.show()

        self.input_api.hide()

        print(cr.client_id)
        print(cr.client_secret)

        self.clear.show()

        def marketLoad(price_ask):
            import client as ct
            _perpetual = 'BTC-PERPETUAL'
            market_ticker = ct.exchange.fetch_ticker(_perpetual)
            _bid = market_ticker['bid']
            _ask = market_ticker['ask']
            price_ask = _ask
            self.bid_price.setHtml(str(_bid))
            self.ask_price.setHtml(str(_ask))
            self.load_price.hide()
            return price_ask

        def openSys():
            self.open_button1.show()
            self.open_button1_2.show()
            self.open_button1_3.show()
            self.open_button1_4.show()
            self.open_button1_5.show()

            self.close_button1.show()
            self.close_button1_2.show()
            self.close_button1_3.show()
            self.close_button1_4.show()
            self.close_button1_5.show()

            self.load_price.clicked.connect(marketLoad)
        openSys()

        def clearPrice(price_ask):
            _bid = None
            _ask = None
            price_ask = _ask
            self.bid_price.setHtml(str(_bid))
            self.ask_price.setHtml(str(_ask))
            self.load_price.show()
            return price_ask

        self.clear_price.clicked.connect(clearPrice)

        bullet = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
                  21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
                  41, 42, 43, 44, 45, 46, 47, 48, 49, 50]

        def openOrder(bullet_take):
            import gspread
            import datetime
            try:
                from oauth2client.service_account import ServiceAccountCredentials

                scope = ["https://spreadsheets.google.com/feeds", 'https://www.googleapis.com/auth/spreadsheets',
                         "https://www.googleapis.com/auth/drive.file", "https://www.googleapis.com/auth/drive"]
                creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
                client = gspread.authorize(creds)
                sheet = client.open("PowersenseDatabase")
                workSheet = sheet.worksheet("Test")
            except gspread.exceptions.APIError:
                # dialog
                print('False')
            user = 'PS01'
            times = str(datetime.datetime.now())
            markPrice = None
            price = marketLoad(markPrice)
            my_list = [[user, bullet_take, price, None, times, None, 'Open']]
            print(my_list)

            def next_available_row(worksheet):
                str_list = list(filter(None, worksheet.col_values(1)))
                return str(len(str_list) + 1)

            next_row = next_available_row(workSheet)
            workSheet.update("A{}".format(next_row), my_list)

            if bullet_take == bullet[0]:
                self.price_1.setText(str(price))
                self.open_button1.hide()
                self.close_button1.show()
                print(marketLoad(price))

            elif bullet_take == bullet[1]:
                self.price_2.setText(str(price))
                self.open_button1_2.hide()
                self.close_button1_2.show()
                print(price)

            elif bullet_take == bullet[2]:
                self.price_3.setText(str(price))
                self.open_button1_3.hide()
                self.close_button1_3.show()
                print(price)

            elif bullet_take == bullet[3]:
                self.price_4.setText(str(price))
                self.open_button1_4.hide()
                self.close_button1_4.show()
                print(price)

            elif bullet_take == bullet[4]:
                self.price_5.setText(str(price))
                self.open_button1_5.hide()
                self.close_button1_5.show()
                print(price)

        self.open_button1.clicked.connect(lambda: openOrder(bullet[0]))
        self.open_button1_2.clicked.connect(lambda: openOrder(bullet[1]))
        self.open_button1_3.clicked.connect(lambda: openOrder(bullet[2]))
        self.open_button1_4.clicked.connect(lambda: openOrder(bullet[3]))
        self.open_button1_5.clicked.connect(lambda: openOrder(bullet[4]))

        def closeOrder(bullet_take):
            import gspread
            import datetime
            try:
                from oauth2client.service_account import ServiceAccountCredentials

                scope = ["https://spreadsheets.google.com/feeds", 'https://www.googleapis.com/auth/spreadsheets',
                         "https://www.googleapis.com/auth/drive.file", "https://www.googleapis.com/auth/drive"]
                creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
                client = gspread.authorize(creds)
                sheet = client.open("PowersenseDatabase")
                workSheet = sheet.worksheet("Test")
            except gspread.exceptions.APIError:
                # dialog
                print('False')
            user = 'PS01'
            times = str(datetime.datetime.now())
            markPrice = None
            price = marketLoad(markPrice)
            my_list = [[user, bullet_take, None, price, None, times, 'Close']]
            print(my_list)

            def next_available_row(worksheet):
                str_list = list(filter(None, worksheet.col_values(1)))
                return str(len(str_list) + 1)

            next_row = next_available_row(workSheet)
            workSheet.update("A{}".format(next_row), my_list)

            if bullet_take == bullet[0]:
                self.price_6.setText(str(price))
                self.close_button1.hide()
                self.open_button1.show()
                print(price)

            elif bullet_take == bullet[1]:
                self.price_7.setText(str(price))
                self.close_button1_2.hide()
                self.open_button1_2.show()
                print(price)

            elif bullet_take == bullet[2]:
                self.price_8.setText(str(price))
                self.close_button1_3.hide()
                self.open_button1_3.show()
                print(price)

            elif bullet_take == bullet[3]:
                self.price_9.setText(str(price))
                self.close_button1_4.hide()
                self.open_button1_4.show()
                print(price)

            elif bullet_take == bullet[4]:
                self.price_10.setText(str(price))
                self.close_button1_5.hide()
                self.open_button1_5.show()
                print(price)

        self.close_button1.clicked.connect(lambda: closeOrder(bullet[0]))
        self.close_button1_2.clicked.connect(lambda: closeOrder(bullet[1]))
        self.close_button1_3.clicked.connect(lambda: closeOrder(bullet[2]))
        self.close_button1_4.clicked.connect(lambda: closeOrder(bullet[3]))
        self.close_button1_5.clicked.connect(lambda: closeOrder(bullet[4]))

    def onClickhide(self):
        import credentials as cr
        self.api_text.hide()
        self.api_key.show()

        self.screct_api.hide()
        self.screct_key.show()

        self.input_api.show()

        cr.client_id = None
        cr.client_secret = None

        print(cr.client_id)
        print(cr.client_secret)

        self.clear_price.disconnect()
        self.load_price.disconnect()

        self.open_button1.disconnect()
        self.close_button1.disconnect()
        self.open_button1_2.disconnect()
        self.close_button1_2.disconnect()
        self.open_button1_3.disconnect()
        self.close_button1_3.disconnect()
        self.open_button1_4.disconnect()
        self.close_button1_4.disconnect()
        self.open_button1_5.disconnect()
        self.close_button1_5.disconnect()

        self.open_button1.show()
        self.close_button1.show()
        self.open_button1_2.show()
        self.close_button1_2.show()
        self.open_button1_3.show()
        self.close_button1_3.show()
        self.open_button1_4.show()
        self.close_button1_4.show()
        self.open_button1_5.show()
        self.close_button1_5.show()

        self.price_1.clear()
        self.price_6.clear()
        self.price_2.clear()
        self.price_7.clear()
        self.price_3.clear()
        self.price_8.clear()
        self.price_4.clear()
        self.price_9.clear()
        self.price_5.clear()
        self.price_10.clear()

        self.bid_price.clear()
        self.ask_price.clear()

        self.load_price.show()
        self.clear_price.show()

        self.clear.hide()




if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
